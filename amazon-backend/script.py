# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NlXlPcnsP4Zu-k4azlvll7HiQEO4pZ46
"""
import sys
import pandas as pd
import nltk
from nltk.corpus import stopwords
import string

# Load the product data from the CSV file into a DataFrame
csv_file_path = '/Users/newuser/Desktop/ipv/Internal-Pointer-Variable/amazon-backend/Dataset.csv'
products_df = pd.read_csv(csv_file_path)

# Function to preprocess and clean text data
def preprocess_text(text):
    # Convert text to lowercase
    text = text.lower()

    # Tokenize the text
    tokens = nltk.word_tokenize(text)

    # Remove stopwords and punctuation
    stop_words = set(stopwords.words('english'))
    tokens = [word for word in tokens if word not in stop_words and word not in string.punctuation]

    # Join the tokens back into a clean text
    clean_text = ' '.join(tokens)

    return clean_text

# Apply the text preprocessing function to relevant columns (Product Name, Categories, Subcategories, Tags, Keywords)
columns_to_preprocess = ['Product Name (Relevant company name)', 'Categories', 'Subcategories', 'Tags', 'Keywords']
for column in columns_to_preprocess:
    products_df[column] = products_df[column].apply(preprocess_text)


from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

# Create a TF-IDF vectorizer
tfidf_vectorizer = TfidfVectorizer()

# Combine the text columns into a single column
products_df['combined_text'] = products_df['Product Name (Relevant company name)'] + ' ' + products_df['Categories'] + ' ' + products_df['Subcategories'] + ' ' + products_df['Tags'] + ' ' + products_df['Keywords']

# Fit and transform the TF-IDF vectorizer on the combined text
tfidf_matrix = tfidf_vectorizer.fit_transform(products_df['combined_text'])

# Compute the cosine similarity between products
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

# Create a DataFrame to store similarity scores
similarity_scores_df = pd.DataFrame(cosine_sim, index=products_df['Product Id'], columns=products_df['Product Id'])

import pandas as pd
import re
from sklearn.feature_extraction.text import ENGLISH_STOP_WORDS

# Load your dataset (replace 'your_dataset.csv' with the actual file path)
df = pd.read_csv(csv_file_path)

# Define a function for text preprocessing
def preprocess_text(text):
    # Tokenization and lowercasing
    tokens = re.findall(r'\b\w+\b', text.lower())
    # Remove punctuation and stop words
    tokens = [word for word in tokens if word not in ENGLISH_STOP_WORDS]
    return ' '.join(tokens)

# Apply the preprocessing function to the text columns
text_columns = ['Product Name (Relevant company name)', 'Categories', 'Subcategories', 'Tags', 'Keywords']
for column in text_columns:
    df[column] = df[column].apply(preprocess_text)

# Save the preprocessed data to a new CSV file
df.to_csv('preprocessed_data.csv', index=False)

from sklearn.feature_extraction.text import TfidfVectorizer

# Create a TF-IDF vectorizer
tfidf_vectorizer = TfidfVectorizer()

# Combine the text columns into one
df['combined_text'] = df['Product Name (Relevant company name)'] + ' ' + df['Categories'] + ' ' + df['Subcategories'] + ' ' + df['Tags'] + ' ' + df['Keywords']

# Fit and transform the TF-IDF vectorizer on the combined_text
tfidf_matrix = tfidf_vectorizer.fit_transform(df['combined_text'])

# Save the TF-IDF matrix to a file for later use
import scipy.sparse
scipy.sparse.save_npz('tfidf_matrix.npz', tfidf_matrix)

columns = df.columns


from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Define the columns of interest
columns_of_interest = ['Product Name (Relevant company name)', 'Categories', 'Subcategories', 'Tags', 'Keywords']

# Create a dictionary to store the TF-IDF vectorizers and matrices for each column
tfidf_dict = {}
tfidf_matrix_dict = {}

# Create and fit TF-IDF vectorizers for each column
for column in columns_of_interest:
    tfidf_vectorizer = TfidfVectorizer(stop_words='english', lowercase=True)
    tfidf_matrix = tfidf_vectorizer.fit_transform(df[column])

    tfidf_dict[column] = tfidf_vectorizer
    tfidf_matrix_dict[column] = tfidf_matrix

# Define weights for each column
weights = {
    'Product Name (Relevant company name)': 0.7,
    'Categories': 1.0,
    'Subcategories': 0.8,
    'Tags': 0.8,
    'Keywords': 0.5
}

# Initialize a variable to store the final weighted similarity matrix
final_similarity_matrix = None

# Calculate weighted similarity for each column individually
for column, weight in weights.items():
    # Calculate cosine similarity for the current column
    cosine_sim_column = cosine_similarity(tfidf_matrix_dict[column])

    # Apply the weight to the cosine similarity matrix
    weighted_cosine_sim = cosine_sim_column * weight

    # Combine the results into the final matrix
    if final_similarity_matrix is None:
        final_similarity_matrix = weighted_cosine_sim
    else:
        final_similarity_matrix += weighted_cosine_sim

# Generate recommendations based on the final similarity matrix
def get_recommendations(product_id):
    # Check if the product_id exists in the DataFrame
    if product_id in df['Product Id'].values:
        # Get the index of the product in the dataset
        product_index = df.index[df['Product Id'] == product_id].tolist()[0]

        # Get the pairwise cosine similarities with other products
        sim_scores = list(enumerate(final_similarity_matrix[product_index]))

        # Sort the products based on the similarity scores
        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

        # Get the product IDs of the most similar products
        similar_products = [df['Product Id'][i] for i, _ in sim_scores][:20]

        return similar_products
    else:
        return ["Product ID not found"]

# Example: Get recommendations for a specific product (replace with the desired product ID)
product_id_temp = sys.argv[1]
recommended_products = get_recommendations(int(product_id_temp))
print(recommended_products)
